[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "ReadyShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LatestSheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadsAverage",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "PriceRequest",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "ReadyShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "PriceRequest",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Acceptance",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadsAverage",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "ReadyShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationHistory",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "TerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesTeams",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "TerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationHistory",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationHistory",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesShow",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesTeams",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "TerminationCode",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "isExtraImport": true,
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "openpyxl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl.",
        "description": "openpyxl.",
        "detail": "openpyxl.",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseBadRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseBadRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumberForm",
        "importPath": "sales.forms",
        "description": "sales.forms",
        "isExtraImport": true,
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "LeadEmailForm",
        "importPath": "sales.forms",
        "description": "sales.forms",
        "isExtraImport": true,
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "LeadContactNameForm",
        "importPath": "sales.forms",
        "description": "sales.forms",
        "isExtraImport": true,
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "main.routing",
        "description": "main.routing",
        "isExtraImport": true,
        "detail": "main.routing",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "leads_average_view",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "import_lead_termination_history",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "lead_details",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "auto_fill",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "edit_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "delete_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "add_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "upload_sheet",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "lead_details",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "auto_fill",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "edit_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "delete_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "upload_sheet",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "add_lead",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "leads_average_view",
        "importPath": "main.views",
        "description": "main.views",
        "isExtraImport": true,
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_lead_related_data",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "get_sheet_name",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "clean_company_name",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "filter_companies",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "send_websocket_message",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "NOTIFICATIONS_STATES",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "clean_company_name",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "filter_companies",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "get_string_value",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "has_valid_contact",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "is_valid_phone_number",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "send_websocket_message",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "NOTIFICATIONS_STATES",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "IBH",
        "description": "IBH",
        "isExtraImport": true,
        "detail": "IBH",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "IBH",
        "description": "IBH",
        "isExtraImport": true,
        "detail": "IBH",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "re,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re.",
        "description": "re.",
        "detail": "re.",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UploadSheetsForm",
        "importPath": "leads.forms",
        "description": "leads.forms",
        "isExtraImport": true,
        "detail": "leads.forms",
        "documentation": {}
    },
    {
        "label": "LeadForm",
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "isExtraImport": true,
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "logging,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging.",
        "description": "logging.",
        "detail": "logging.",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "view_team_member",
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "isExtraImport": true,
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_member_recycled",
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "isExtraImport": true,
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_prospect",
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "isExtraImport": true,
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_recycled",
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "isExtraImport": true,
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_shows",
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "isExtraImport": true,
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "agent_assigned_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "show_detail",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_recycled_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_recycled_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_saved_leads",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "agent_assigned_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "show_detail",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_recycled_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_recycled_shows",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_saved_leads",
        "importPath": "sales.views",
        "description": "sales.views",
        "isExtraImport": true,
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "AssignSalesToLeaderForm",
        "importPath": "sales_manager.forms",
        "description": "sales_manager.forms",
        "isExtraImport": true,
        "detail": "sales_manager.forms",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AdministratorConfig",
        "kind": 6,
        "importPath": "administrator.apps",
        "description": "administrator.apps",
        "peekOfCode": "class AdministratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'administrator'",
        "detail": "administrator.apps",
        "documentation": {}
    },
    {
        "label": "UserUpdateForm",
        "kind": 6,
        "importPath": "administrator.forms",
        "description": "administrator.forms",
        "peekOfCode": "class UserUpdateForm(forms.ModelForm):\n    new_password = forms.CharField(\n        label='New Password',\n        widget=forms.PasswordInput,\n        required=False,\n        validators=[validate_password],\n    )\n    confirm_password = forms.CharField(\n        label='Confirm Password',\n        widget=forms.PasswordInput,",
        "detail": "administrator.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationFormWithRole",
        "kind": 6,
        "importPath": "administrator.forms",
        "description": "administrator.forms",
        "peekOfCode": "class UserCreationFormWithRole(forms.ModelForm):\n    password1 = forms.CharField(\n        label='Password',\n        widget=forms.PasswordInput,\n        validators=[validate_password],\n    )\n    password2 = forms.CharField(\n        label='Confirm Password',\n        widget=forms.PasswordInput,\n        validators=[validate_password],",
        "detail": "administrator.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "administrator.urls",
        "description": "administrator.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name='administrator_index'),\n    path('users/add-user/', add_user, name='add-user'),\n    path('users/manage-users/', manage_users, name='manage-users'),\n    path('view-logs/', view_logs, name='view-logs'),\n    path('users/delete-user/<int:user_id>/', delete_user, name='delete-user'),\n    path('users/edit-user/<int:user_id>/', edit_user, name='edit-user'),\n    path('manage-sheets/', manage_sheets, name='manage-sheets'),\n    path('cut-sheet/<int:sheet_id>/', cut_sheet_into_ready_show, name='cut-sheet'),\n    path('sheets-done/', done_sheets, name='sheets-done'),",
        "detail": "administrator.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def index(request):\n    return render(request, \"administrator/index.html\", {\n        \"message\": \"Testing administrator\"\n    })\n@user_passes_test(lambda user: is_in_group(user, \"administrator\"))\ndef add_user(request):\n    if request.method == 'POST':\n        form = UserCreationFormWithRole(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def add_user(request):\n    if request.method == 'POST':\n        form = UserCreationFormWithRole(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            user.set_password(form.cleaned_data['password1']) \n            role = form.cleaned_data['role']\n            group, created = Group.objects.get_or_create(name=role)\n            user.save()\n            user.groups.add(group)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "manage_users",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def manage_users(request):\n    query = request.GET.get('q', '')\n    users = User.objects.filter(Q(username__icontains=query))\n    # Pagination\n    paginator = Paginator(users, 10)  # Show 10 users per page\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    return render(request, \"administrator/manage_users.html\", {\n        'page_obj': page_obj,\n    'query': query,",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def delete_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        user.delete()\n        messages.success(request, 'User deleted successfully.')\n        return redirect('administrator:manage-users')\n    return render(request, 'administrator/confirm_delete.html', {'user': user})\n@user_passes_test(lambda user: is_in_group(user, \"administrator\"))\ndef edit_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "edit_user",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def edit_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        form = UserUpdateForm(request.POST, instance=user)\n        if form.is_valid():\n            new_password = form.cleaned_data.get('new_password')\n            if new_password:\n                user.set_password(new_password)\n            role = form.cleaned_data.get('role')\n            group, created = Group.objects.get_or_create(name=role)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "view_logs",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def view_logs(request):\n    logs=Log.objects.all().order_by('-date')\n    paginator = Paginator(logs, 30)\n    page_num=request.GET.get('page')\n    page_obj=paginator.get_page(page_num)\n    context={\n        'logs':page_obj\n    }\n    return render(request, \"administrator/view_logs.html\", context)\n@user_passes_test(lambda user: is_in_group(user, \"administrator\"))",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "manage_sheets",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def manage_sheets(request):\n    sheets = Sheet.objects.filter(is_approved=True, is_done=False)\n    q = request.GET.get(\"q\", '')\n    if q:\n        sheets = sheets.filter(\n            Q(name__icontains=q)\n        )\n    paginator=Paginator(sheets, 20)\n    page_num = request.GET.get(\"page\", '')\n    page_obj = paginator.get_page(page_num)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "cut_sheet_into_ready_show",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def cut_sheet_into_ready_show(request, sheet_id):\n    # Get the sheet and mark it as done\n    sheet = get_object_or_404(Sheet, id=sheet_id)\n    sheet.is_done = True\n    sheet.done_date = timezone.now()\n    sheet.save()\n    # Group the leads by time zone (cen, est, pac)\n    time_zones = ['cen', 'est', 'pac']\n    leads_by_zone = {\n        tz: list(sheet.leads.filter(time_zone=tz)) for tz in time_zones",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "done_sheets",
        "kind": 2,
        "importPath": "administrator.views",
        "description": "administrator.views",
        "peekOfCode": "def done_sheets(request):\n    # Fetch sheets that are marked as done\n    done_sheets = Sheet.objects.filter(is_done=True)\n    context = {\n        'done_sheets': done_sheets\n    }\n    return render(request, 'administrator/done_sheets.html', context)",
        "detail": "administrator.views",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"add-phone-number\", add_phone_number, name=\"add_phone_number\"),\n    path(\"add-email\", add_email, name=\"add_email\"),\n    path(\"add-contact-name\", add_contact_name, name=\"add_contact_name\"),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "add_phone_number",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def add_phone_number(request):\n    form = LeadPhoneNumberForm(request.data)\n    if form.is_valid():\n        phone_number = form.save(commit=False)\n        phone_number.lead_id = request.data.get('lead_id')\n        phone_number.sheet_id = request.data.get('sheet_id')  # Pass the correct sheet ID\n        phone_number.save()\n        return Response({\"message\": \"Phone number added successfully\", \"phone_number\": phone_number.value}, status=status.HTTP_201_CREATED)\n    return Response({\"errors\": form.errors}, status=status.HTTP_400_BAD_REQUEST)\n@api_view(['POST'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "add_email",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def add_email(request):\n    form = LeadEmailForm(request.data)\n    if form.is_valid():\n        email = form.save(commit=False)\n        email.lead_id = request.data.get('lead_id')\n        email.sheet_id = request.data.get('sheet_id')\n        email.save()\n        return Response({\"message\": \"Email added successfully\", \"email\": email.value}, status=status.HTTP_201_CREATED)\n    return Response({\"errors\": form.errors}, status=status.HTTP_400_BAD_REQUEST)\n@api_view(['POST'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "add_contact_name",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def add_contact_name(request):\n    form = LeadContactNameForm(request.data)\n    if form.is_valid():\n        contact_name = form.save(commit=False)\n        contact_name.lead_id = request.data.get('lead_id')\n        contact_name.sheet_id = request.data.get('sheet_id')\n        contact_name.save()\n        return Response({\"message\": \"Contact name added successfully\", \"contact_name\": contact_name.value}, status=status.HTTP_201_CREATED)\n    return Response({\"errors\": form.errors}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "IBH.asgi",
        "description": "IBH.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nfrom main.routing import websocket_urlpatterns\napplication = ProtocolTypeRouter({\n    'http': django_asgi_app,\n    'websocket': AuthMiddlewareStack(\n        URLRouter(\n            websocket_urlpatterns\n        )",
        "detail": "IBH.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "IBH.asgi",
        "description": "IBH.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    'http': django_asgi_app,\n    'websocket': AuthMiddlewareStack(\n        URLRouter(\n            websocket_urlpatterns\n        )\n    ),\n})",
        "detail": "IBH.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSTATIC_URL = '/static/'  # URL to access static files\n# Where static files will be collected for production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Add any extra locations for static files during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Do not include STATIC_ROOT here\n]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "STATIC_URL = '/static/'  # URL to access static files\n# Where static files will be collected for production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Add any extra locations for static files during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Do not include STATIC_ROOT here\n]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Add any extra locations for static files during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Do not include STATIC_ROOT here\n]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-x0t)8qx9buoxxbiq#v4hmxdqt&$e(t%#c0=5jj$rthyb1!042@'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Do not include STATIC_ROOT here\n]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-x0t)8qx9buoxxbiq#v4hmxdqt&$e(t%#c0=5jj$rthyb1!042@'\n# SECURITY WARNING: don't run with debug turned on in production!\n# Change it to True while Developing, to load your static files\nDEBUG = True",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-x0t)8qx9buoxxbiq#v4hmxdqt&$e(t%#c0=5jj$rthyb1!042@'\n# SECURITY WARNING: don't run with debug turned on in production!\n# Change it to True while Developing, to load your static files\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1', 'ibhgenie.local','192.168.0.200']\n# Application definition\nINSTALLED_APPS = [\n    # 'daphne',\n    'channels',\n    'django.contrib.admin',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1', 'ibhgenie.local','192.168.0.200']\n# Application definition\nINSTALLED_APPS = [\n    # 'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'ibhgenie.local','192.168.0.200']\n# Application definition\nINSTALLED_APPS = [\n    # 'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # 'daphne',\n    'channels',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'main',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "ASGI_APPLICATION = 'IBH.asgi.application'\n# CHANNEL_LAYERS = {\n#     \"default\": {\n#         \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n#         \"CONFIG\": {\n#             \"hosts\": [(\"127.0.0.1\", 6379)],\n#         },\n#     },\n# }\n# Session will expire when the browser is closed",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_EXPIRE_AT_BROWSER_CLOSE",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "SESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_COOKIE_AGE = 300  # 300 sec = 5 minutes\nCHANNEL_LAYERS = {\n    'default': {'BACKEND': 'channels.layers.InMemoryChannelLayer'}\n}\nTIME_ZONE = 'Africa/Cairo'\nUSE_TZ = True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_AGE",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "SESSION_COOKIE_AGE = 300  # 300 sec = 5 minutes\nCHANNEL_LAYERS = {\n    'default': {'BACKEND': 'channels.layers.InMemoryChannelLayer'}\n}\nTIME_ZONE = 'Africa/Cairo'\nUSE_TZ = True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {'BACKEND': 'channels.layers.InMemoryChannelLayer'}\n}\nTIME_ZONE = 'Africa/Cairo'\nUSE_TZ = True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "TIME_ZONE = 'Africa/Cairo'\nUSE_TZ = True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "USE_TZ = True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'IBH.urls'",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "ROOT_URLCONF = 'IBH.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "WSGI_APPLICATION = 'IBH.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'genie',\n        'USER': 'ahmed',\n        'PASSWORD': 'root',  # MySQL server pass is 'admin@ibh'\n        'HOST': 'localhost',  # or the IP address of your MySQL server '192.168.0.200'",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'genie',\n        'USER': 'ahmed',\n        'PASSWORD': 'root',  # MySQL server pass is 'admin@ibh'\n        'HOST': 'localhost',  # or the IP address of your MySQL server '192.168.0.200'\n        'PORT': '3306',\n        'OPTIONS': {        \n            'charset': 'utf8mb4',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\n# TIME_ZONE = 'UTC'\nUSE_I18N = True\n# USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / \"static\" ]\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where static files will be collected IN PRODUCTION\n# Default primary key field type",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "USE_I18N = True\n# USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / \"static\" ]\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where static files will be collected IN PRODUCTION\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / \"static\" ]\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where static files will be collected IN PRODUCTION\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "STATICFILES_DIRS = [ BASE_DIR / \"static\" ]\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where static files will be collected IN PRODUCTION\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module}.py {name} process:{process:d} thread:{thread:d} line:{lineno} {message}',\n            'style': '{',\n        },\n        'simple': {",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module}.py {name} process:{process:d} thread:{thread:d} line:{lineno} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "IBH.settings",
        "description": "IBH.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "IBH.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "IBH.urls",
        "description": "IBH.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", include(\"main.urls\")),\n    path(\"administrator/\", include(\"administrator.urls\", namespace='administrator')),\n    path(\"operations_team_leader/\", include(\"operations_team_leader.urls\", namespace='operations_team_leader')),\n    path(\"sales_manager/\", include(\"sales_manager.urls\", namespace='sales_manager')),\n    path(\"sales_team_leader/\", include(\"sales_team_leader.urls\", namespace='sales_team_leader')),\n    path(\"operations_manager/\", include(\"operations_manager.urls\", namespace='operations_manager')),\n    path(\"api/\", include(\"api.urls\", namespace='api')),\n    path(\"leads/\", include(\"leads.urls\", namespace=\"leads\")),\n    path(\"sales/\", include(\"sales.urls\", namespace=\"sales\")),",
        "detail": "IBH.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "IBH.wsgi",
        "description": "IBH.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "IBH.wsgi",
        "documentation": {}
    },
    {
        "label": "LeadsConfig",
        "kind": 6,
        "importPath": "leads.apps",
        "description": "leads.apps",
        "peekOfCode": "class LeadsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'leads'",
        "detail": "leads.apps",
        "documentation": {}
    },
    {
        "label": "AutoFillForm",
        "kind": 6,
        "importPath": "leads.forms",
        "description": "leads.forms",
        "peekOfCode": "class AutoFillForm(forms.Form):\n    file = forms.FileField(\n        required=True, \n        label=\"Choose a file\",\n        widget=forms.ClearableFileInput(attrs={\n            'class': 'form-control',\n            'id': 'file'\n        })\n    )\n    latest_sheet = forms.ModelChoiceField(",
        "detail": "leads.forms",
        "documentation": {}
    },
    {
        "label": "UploadSheetsForm",
        "kind": 6,
        "importPath": "leads.forms",
        "description": "leads.forms",
        "peekOfCode": "class UploadSheetsForm(forms.Form):\n        file = forms.FileField(\n            widget=forms.ClearableFileInput(attrs={\n                'class': 'form-control-file',  # Bootstrap class for file input\n                'id': 'fileInput'\n            })\n        )",
        "detail": "leads.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "leads.urls",
        "description": "leads.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name='leads_index'),\n    path('auto-fill/', auto_fill, name='auto-fill'),\n    path('upload-sheet/', upload_sheet, name='upload-sheet'),\n    path('leads-average/', leads_average_view, name='leads-average'),\n    path('import-sheets/', import_lead_termination_history, name='import-sheets'),\n    path('notifications/', notifications, name='leads-notifications'),\n    path('notifications/<int:notification_id>/', notification_detail, name='leads-notification-detail'),\n    path('notifications/<int:notification_id>/sheet/<int:sheet_id>/', sheet_detail, name='leads-sheet-detail'),\n    path('notifications/<int:notification_id>/download-auto-fill-result/', download_auto_fill_result, name='download-auto-fill-result'),",
        "detail": "leads.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)\n    else:\n        leads = Lead.objects.all()",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "auto_fill",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def auto_fill(request):\n    form = AutoFillForm()\n    if request.method == 'POST':\n        form = AutoFillForm(request.POST, request.FILES)\n        if 'file' in request.FILES and form.is_valid():\n            file = request.FILES['file']\n            latest_sheet = form.cleaned_data.get('latest_sheet')\n            # Define the upload directory within the project folder\n            upload_dir = os.path.join(settings.MEDIA_ROOT, 'auto_fill')\n            # Create the directory if it does not exist",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "notifications",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def notifications(request):\n    user = request.user\n    notifications_for_user = Notification.objects.filter(\n        receiver=user).order_by('-created_at')\n    # Implement pagination\n    page = request.GET.get('page', '')\n    # Show 10 notifications per page\n    paginator = Paginator(notifications_for_user, 5)\n    try:\n        notifications_page = paginator.page(page)",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "notification_detail",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def notification_detail(request, notification_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheets = notification.sheets.all()\n    if not notification.read:\n        notification.read = True\n        notification.save()\n    return render(request, 'leads/notification_detail.html',{\n        'notification': notification,\n        'sheets': sheets\n    })",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "sheet_detail",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def sheet_detail(request, notification_id, sheet_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheet = get_object_or_404(Sheet, id=sheet_id)\n    leads = sheet.leads.all()\n    return render(request, 'leads/sheet_detail.html', {'sheet': sheet, 'leads': leads, 'notification': notification})\n@user_passes_test(lambda user: is_in_group(user, \"leads\"))\ndef upload_sheet(request):\n    form = UploadSheetsForm()\n    if request.method == 'POST':\n        form = UploadSheetsForm(request.POST, request.FILES)",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "upload_sheet",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def upload_sheet(request):\n    form = UploadSheetsForm()\n    if request.method == 'POST':\n        form = UploadSheetsForm(request.POST, request.FILES)\n        if 'file' in request.FILES:\n            file = request.FILES['file']\n            # Define the upload directory within the project folder\n            upload_dir = os.path.join(settings.MEDIA_ROOT, 'upload')\n            # Create the directory if it does not exist\n            os.makedirs(upload_dir, exist_ok=True)",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "download_auto_fill_result",
        "kind": 2,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "def download_auto_fill_result(request, notification_id):\n    # Get notification and sheet\n    notification = Notification.objects.get(id=notification_id)\n    sheet = notification.sheets.first()\n    if not sheet:\n        return HttpResponse(\"Sheet not found.\", status=404)\n    # Get the file path for the auto-fill result\n    file_path = os.path.join(settings.MEDIA_ROOT, 'auto_fill', sheet.name)\n    if not default_storage.exists(file_path):\n        return HttpResponse(\"File not found.\", status=404)",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "leads.views",
        "description": "leads.views",
        "peekOfCode": "logger = logging.getLogger('custom')\n@user_passes_test(lambda user: is_in_group(user, \"leads\"))\ndef index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)",
        "detail": "leads.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0001_initial",
        "description": "main.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Flag',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "main.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0002_add_groups",
        "description": "main.migrations.0002_add_groups",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0001_initial'),\n    ]\n    operations = [\n        migrations.RunPython(create_groups),\n    ]",
        "detail": "main.migrations.0002_add_groups",
        "documentation": {}
    },
    {
        "label": "create_groups",
        "kind": 2,
        "importPath": "main.migrations.0002_add_groups",
        "description": "main.migrations.0002_add_groups",
        "peekOfCode": "def create_groups(apps, schema_editor):\n    Group = apps.get_model('auth', 'Group')\n    group_names = ['administrator', 'leads', 'operations_team_leader','operations_manager','sales','sales_team_leader','sales_manager']\n    for group_name in group_names:\n        Group.objects.get_or_create(name=group_name)\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0001_initial'),\n    ]\n    operations = [",
        "detail": "main.migrations.0002_add_groups",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0003_alter_sheet_done_date",
        "description": "main.migrations.0003_alter_sheet_done_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0002_add_groups'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='sheet',\n            name='done_date',\n            field=models.DateTimeField(blank=True, null=True),\n        ),",
        "detail": "main.migrations.0003_alter_sheet_done_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0003_rename_traget_user_notification_target_user_and_more",
        "description": "main.migrations.0003_rename_traget_user_notification_target_user_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0002_add_groups'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='notification',\n            old_name='traget_user',\n            new_name='target_user',",
        "detail": "main.migrations.0003_rename_traget_user_notification_target_user_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0004_alter_userleader_leader_alter_userleader_user",
        "description": "main.migrations.0004_alter_userleader_leader_alter_userleader_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0003_rename_traget_user_notification_target_user_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userleader',\n            name='leader',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leads', to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0004_alter_userleader_leader_alter_userleader_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0005_alter_userleader_leader",
        "description": "main.migrations.0005_alter_userleader_leader",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0004_alter_userleader_leader_alter_userleader_user'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userleader',\n            name='leader',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0005_alter_userleader_leader",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0006_alter_userleader_leader_alter_userleader_user",
        "description": "main.migrations.0006_alter_userleader_leader_alter_userleader_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0005_alter_userleader_leader'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userleader',\n            name='leader',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0006_alter_userleader_leader_alter_userleader_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0007_merge_20240729_0047",
        "description": "main.migrations.0007_merge_20240729_0047",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0003_alter_sheet_done_date'),\n        ('main', '0006_alter_userleader_leader_alter_userleader_user'),\n    ]\n    operations = [\n    ]",
        "detail": "main.migrations.0007_merge_20240729_0047",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0007_merge_20240729_1638",
        "description": "main.migrations.0007_merge_20240729_1638",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0003_alter_sheet_done_date'),\n        ('main', '0006_alter_userleader_leader_alter_userleader_user'),\n    ]\n    operations = [\n    ]",
        "detail": "main.migrations.0007_merge_20240729_1638",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0008_rename_seen_notification_is_accepted_and_more",
        "description": "main.migrations.0008_rename_seen_notification_is_accepted_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0007_merge_20240729_1638'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='notification',\n            old_name='seen',\n            new_name='is_accepted',",
        "detail": "main.migrations.0008_rename_seen_notification_is_accepted_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0009_merge_20240730_1237",
        "description": "main.migrations.0009_merge_20240730_1237",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0007_merge_20240729_0047'),\n        ('main', '0008_rename_seen_notification_is_accepted_and_more'),\n    ]\n    operations = [\n    ]",
        "detail": "main.migrations.0009_merge_20240730_1237",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0010_logs",
        "description": "main.migrations.0010_logs",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0009_merge_20240730_1237'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Logs',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('message', models.CharField(max_length=255)),",
        "detail": "main.migrations.0010_logs",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0011_rename_logs_log_rename_created_at_log_date",
        "description": "main.migrations.0011_rename_logs_log_rename_created_at_log_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0010_logs'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Logs',\n            new_name='Log',\n        ),\n        migrations.RenameField(",
        "detail": "main.migrations.0011_rename_logs_log_rename_created_at_log_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0012_acceptance_acceptance_type_and_more",
        "description": "main.migrations.0012_acceptance_acceptance_type_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0011_rename_logs_log_rename_created_at_log_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='acceptance',\n            name='acceptance_type',\n            field=models.IntegerField(choices=[(0, 'Decline'), (1, 'Accept')], default=1),\n            preserve_default=False,",
        "detail": "main.migrations.0012_acceptance_acceptance_type_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0013_alter_notification_notification_type",
        "description": "main.migrations.0013_alter_notification_notification_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0012_acceptance_acceptance_type_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='notification',\n            name='notification_type',\n            field=models.IntegerField(choices=[(0, 'Import Request'), (1, 'Acceptance Notification'), (2, 'Decline Notification'), (3, 'Autofill Request'), (4, 'Autofill Request accepted'), (5, 'Autofill Request decliend')]),\n        ),",
        "detail": "main.migrations.0013_alter_notification_notification_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0014_alter_lead_time_zone",
        "description": "main.migrations.0014_alter_lead_time_zone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0013_alter_notification_notification_type'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='lead',\n            name='time_zone',\n            field=models.CharField(max_length=10),\n        ),",
        "detail": "main.migrations.0014_alter_lead_time_zone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0015_alter_lead_name_alter_lead_time_zone",
        "description": "main.migrations.0015_alter_lead_name_alter_lead_time_zone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0014_alter_lead_time_zone'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='lead',\n            name='name',\n            field=models.CharField(max_length=255, unique=True),\n        ),",
        "detail": "main.migrations.0015_alter_lead_name_alter_lead_time_zone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0016_alter_leadcontactnames_value_and_more",
        "description": "main.migrations.0016_alter_leadcontactnames_value_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0015_alter_lead_name_alter_lead_time_zone'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='leadcontactnames',\n            name='value',\n            field=models.CharField(max_length=255),\n        ),",
        "detail": "main.migrations.0016_alter_leadcontactnames_value_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0017_alter_leadcontactnames_unique_together_and_more",
        "description": "main.migrations.0017_alter_leadcontactnames_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0016_alter_leadcontactnames_value_and_more'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='leadcontactnames',\n            unique_together={('lead', 'value')},\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "main.migrations.0017_alter_leadcontactnames_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0018_alter_lead_name_alter_sheet_name",
        "description": "main.migrations.0018_alter_lead_name_alter_sheet_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0017_alter_leadcontactnames_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='lead',\n            name='name',\n            field=models.CharField(db_collation='utf8mb4_general_ci', max_length=255, unique=True),\n        ),",
        "detail": "main.migrations.0018_alter_lead_name_alter_sheet_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0019_alter_leadcontactnames_unique_together_and_more",
        "description": "main.migrations.0019_alter_leadcontactnames_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0018_alter_lead_name_alter_sheet_name'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='leadcontactnames',\n            unique_together=set(),\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "main.migrations.0019_alter_leadcontactnames_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0020_alter_leadcontactnames_sheet_alter_leademails_sheet_and_more",
        "description": "main.migrations.0020_alter_leadcontactnames_sheet_alter_leademails_sheet_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0019_alter_leadcontactnames_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='leadcontactnames',\n            name='sheet',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sheet'),\n        ),",
        "detail": "main.migrations.0020_alter_leadcontactnames_sheet_alter_leademails_sheet_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0021_latestsheet",
        "description": "main.migrations.0021_latestsheet",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0020_alter_leadcontactnames_sheet_alter_leademails_sheet_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LatestSheet',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "main.migrations.0021_latestsheet",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0022_leadsaverage",
        "description": "main.migrations.0022_leadsaverage",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0021_latestsheet'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LeadsAverage',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "main.migrations.0022_leadsaverage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0023_alter_leadsaverage_user",
        "description": "main.migrations.0023_alter_leadsaverage_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0022_leadsaverage'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='leadsaverage',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0023_alter_leadsaverage_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0024_rename_leadflag_leadterminationcode_and_more",
        "description": "main.migrations.0024_rename_leadflag_leadterminationcode_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0023_alter_leadsaverage_user'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='LeadFlag',\n            new_name='LeadTerminationCode',\n        ),\n        migrations.RenameModel(",
        "detail": "main.migrations.0024_rename_leadflag_leadterminationcode_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0025_rename_show_name_salesshow_name_salesshow_done_date_and_more",
        "description": "main.migrations.0025_rename_show_name_salesshow_name_salesshow_done_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0024_rename_leadflag_leadterminationcode_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='salesshow',\n            old_name='show_name',\n            new_name='name',\n        ),",
        "detail": "main.migrations.0025_rename_show_name_salesshow_name_salesshow_done_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0026_readyshow_label",
        "description": "main.migrations.0026_readyshow_label",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0025_rename_show_name_salesshow_name_salesshow_done_date_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='readyshow',\n            name='label',\n            field=models.CharField(choices=[('EHUB', 'EHUB'), ('EHUB2', 'EHUB2'), ('EP', 'EP')], default='EHUB', max_length=5),\n        ),",
        "detail": "main.migrations.0026_readyshow_label",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0027_rename_is_cut_readyshow_is_done",
        "description": "main.migrations.0027_rename_is_cut_readyshow_is_done",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0026_readyshow_label'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='readyshow',\n            old_name='is_cut',\n            new_name='is_done',\n        ),",
        "detail": "main.migrations.0027_rename_is_cut_readyshow_is_done",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0028_salesshow_agent_salesshow_label",
        "description": "main.migrations.0028_salesshow_agent_salesshow_label",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0027_rename_is_cut_readyshow_is_done'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='salesshow',\n            name='Agent',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0028_salesshow_agent_salesshow_label",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0029_salesteams",
        "description": "main.migrations.0029_salesteams",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0028_salesshow_agent_salesshow_label'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SalesTeams',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "main.migrations.0029_salesteams",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0030_terminationcode_full_name",
        "description": "main.migrations.0030_terminationcode_full_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0029_salesteams'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='terminationcode',\n            name='full_name',\n            field=models.CharField(default=' ', max_length=10),\n            preserve_default=False,",
        "detail": "main.migrations.0030_terminationcode_full_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0032_alter_terminationcode_full_name",
        "description": "main.migrations.0032_alter_terminationcode_full_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0030_terminationcode_full_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='terminationcode',\n            name='full_name',\n            field=models.CharField(max_length=25),\n        ),",
        "detail": "main.migrations.0032_alter_terminationcode_full_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0033_add_termination_codes",
        "description": "main.migrations.0033_add_termination_codes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0032_alter_terminationcode_full_name'),  \n    ]\n    operations = [\n        migrations.RunPython(create_termination_codes),\n    ]",
        "detail": "main.migrations.0033_add_termination_codes",
        "documentation": {}
    },
    {
        "label": "create_termination_codes",
        "kind": 2,
        "importPath": "main.migrations.0033_add_termination_codes",
        "description": "main.migrations.0033_add_termination_codes",
        "peekOfCode": "def create_termination_codes(apps, schema_editor):\n    TerminationCodes = apps.get_model('main', 'TerminationCode')\n    termination_codes = [\n        (\"CD\", \"Closed deal\"),\n        (\"PR\", \"Prospect\"),\n        (\"Show\", \"Moved in blacklist\"),\n        (\"CB\", \"Call back\"),\n        (\"FL\", \"Flag\"),\n        (\"IC\", \"Incoming\"),\n        (\"IP\", \"Info passed\"),",
        "detail": "main.migrations.0033_add_termination_codes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0034_leadterminationcode_notes",
        "description": "main.migrations.0034_leadterminationcode_notes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0033_add_termination_codes'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='notes',\n            field=models.TextField(default=''),\n            preserve_default=False,",
        "detail": "main.migrations.0034_leadterminationcode_notes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0035_alter_leadterminationcode_cb_date_and_more",
        "description": "main.migrations.0035_alter_leadterminationcode_cb_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0034_leadterminationcode_notes'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='leadterminationcode',\n            name='CB_date',\n            field=models.DateTimeField(null=True),\n        ),",
        "detail": "main.migrations.0035_alter_leadterminationcode_cb_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0036_leadterminationcode_user",
        "description": "main.migrations.0036_leadterminationcode_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0035_alter_leadterminationcode_cb_date_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='user',\n            field=models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),",
        "detail": "main.migrations.0036_leadterminationcode_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0037_leadterminationcode_is_qualified",
        "description": "main.migrations.0037_leadterminationcode_is_qualified",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0036_leadterminationcode_user'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='is_qualified',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "main.migrations.0037_leadterminationcode_is_qualified",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0038_leadterminationcode_entry_date",
        "description": "main.migrations.0038_leadterminationcode_entry_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0037_leadterminationcode_is_qualified'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='entry_date',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "main.migrations.0038_leadterminationcode_entry_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0039_leadterminationcode_num_nights_and_more",
        "description": "main.migrations.0039_leadterminationcode_num_nights_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0038_leadterminationcode_entry_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='num_nights',\n            field=models.PositiveIntegerField(blank=True, null=True),\n        ),",
        "detail": "main.migrations.0039_leadterminationcode_num_nights_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0040_remove_leadterminationcode_num_nights_and_more",
        "description": "main.migrations.0040_remove_leadterminationcode_num_nights_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0039_leadterminationcode_num_nights_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='leadterminationcode',\n            name='num_nights',\n        ),\n        migrations.RemoveField(",
        "detail": "main.migrations.0040_remove_leadterminationcode_num_nights_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0041_remove_leadterminationcode_options_and_more",
        "description": "main.migrations.0041_remove_leadterminationcode_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0040_remove_leadterminationcode_num_nights_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='leadterminationcode',\n            name='options',\n        ),\n        migrations.AddField(",
        "detail": "main.migrations.0041_remove_leadterminationcode_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0042_leadterminationcode_options_pricerequest",
        "description": "main.migrations.0042_leadterminationcode_options_pricerequest",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0041_remove_leadterminationcode_options_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationcode',\n            name='options',\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "main.migrations.0042_leadterminationcode_options_pricerequest",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0043_remove_salesshow_info",
        "description": "main.migrations.0043_remove_salesshow_info",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0042_leadterminationcode_options_pricerequest'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='salesshow',\n            name='info',\n        ),\n    ]",
        "detail": "main.migrations.0043_remove_salesshow_info",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0044_leadterminationhistory",
        "description": "main.migrations.0044_leadterminationhistory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0043_remove_salesshow_info'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LeadTerminationHistory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('cb_date', models.DateTimeField(null=True)),",
        "detail": "main.migrations.0044_leadterminationhistory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0045_pricerequest_options_pricerequest_show",
        "description": "main.migrations.0045_pricerequest_options_pricerequest_show",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0044_leadterminationhistory'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='pricerequest',\n            name='options',\n            field=models.TextField(default=''),\n            preserve_default=False,",
        "detail": "main.migrations.0045_pricerequest_options_pricerequest_show",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0046_pricerequest_notes_pricerequest_num_nights_and_more",
        "description": "main.migrations.0046_pricerequest_notes_pricerequest_num_nights_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0045_pricerequest_options_pricerequest_show'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='pricerequest',\n            name='notes',\n            field=models.TextField(null=True),\n        ),",
        "detail": "main.migrations.0046_pricerequest_notes_pricerequest_num_nights_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0047_pricerequest_email_status_pricerequest_lead_status",
        "description": "main.migrations.0047_pricerequest_email_status_pricerequest_lead_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0046_pricerequest_notes_pricerequest_num_nights_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='pricerequest',\n            name='email_status',\n            field=models.CharField(choices=[('sent', 'Sent'), ('not_sent', 'Not Sent')], max_length=20, null=True),\n        ),",
        "detail": "main.migrations.0047_pricerequest_email_status_pricerequest_lead_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0048_oldshow_alter_leadterminationhistory_show_and_more",
        "description": "main.migrations.0048_oldshow_alter_leadterminationhistory_show_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0047_pricerequest_email_status_pricerequest_lead_status'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OldShow',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "main.migrations.0048_oldshow_alter_leadterminationhistory_show_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0049_leadterminationhistory_entry_date_and_more",
        "description": "main.migrations.0049_leadterminationhistory_entry_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0048_oldshow_alter_leadterminationhistory_show_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='leadterminationhistory',\n            name='entry_date',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "main.migrations.0049_leadterminationhistory_entry_date_and_more",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "main.apps",
        "description": "main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'main'",
        "detail": "main.apps",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "kind": 6,
        "importPath": "main.consumers",
        "description": "main.consumers",
        "peekOfCode": "class NotificationConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.group_name = f'notifications_{self.scope[\"user\"].id}'\n        await self.channel_layer.group_add(self.group_name, self.channel_name) \n        await self.accept()\n    async def disconnect(self, close_code):\n        await self.channel_layer.group_discard(self.group_name, self.channel_name) \n    async def receive(self, text_data):\n        data = json.loads(text_data)\n        receiver = User.objects.get(id=data['receiver_id']) ",
        "detail": "main.consumers",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "kind": 2,
        "importPath": "main.custom_decorators",
        "description": "main.custom_decorators",
        "peekOfCode": "def is_in_group(user, group_name):\n    return user.is_authenticated and user.groups.filter(name=group_name).exists()",
        "detail": "main.custom_decorators",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "main.custom_logs",
        "description": "main.custom_logs",
        "peekOfCode": "def admin(self, message, *args, **kwargs):\n    if self.isEnabledFor(ADMIN_LEVEL_NUM):\n        self._log(ADMIN_LEVEL_NUM, message, args, **kwargs)\nlogging.Logger.admin = admin",
        "detail": "main.custom_logs",
        "documentation": {}
    },
    {
        "label": "ADMIN_LEVEL_NUM",
        "kind": 5,
        "importPath": "main.custom_logs",
        "description": "main.custom_logs",
        "peekOfCode": "ADMIN_LEVEL_NUM = 25  \nlogging.addLevelName(ADMIN_LEVEL_NUM, 'ADMIN')\ndef admin(self, message, *args, **kwargs):\n    if self.isEnabledFor(ADMIN_LEVEL_NUM):\n        self._log(ADMIN_LEVEL_NUM, message, args, **kwargs)\nlogging.Logger.admin = admin",
        "detail": "main.custom_logs",
        "documentation": {}
    },
    {
        "label": "logging.Logger.admin",
        "kind": 5,
        "importPath": "main.custom_logs",
        "description": "main.custom_logs",
        "peekOfCode": "logging.Logger.admin = admin",
        "detail": "main.custom_logs",
        "documentation": {}
    },
    {
        "label": "ImportSheetsForm",
        "kind": 6,
        "importPath": "main.forms",
        "description": "main.forms",
        "peekOfCode": "class ImportSheetsForm(forms.Form):\n    folder_path = forms.CharField(label='Folder Path', max_length=255)\n# Without acceptance for operations managers and team leader\nclass AutoFillForm(forms.Form):\n    file = forms.FileField(required=True, label=\"Choose a file\")\n    latest_sheet = forms.ModelChoiceField(\n        queryset=Sheet.objects.all(), \n        required=False, \n        label=\"Select a Sheet\",\n        widget=forms.Select(attrs={'class': 'form-control'})",
        "detail": "main.forms",
        "documentation": {}
    },
    {
        "label": "AutoFillForm",
        "kind": 6,
        "importPath": "main.forms",
        "description": "main.forms",
        "peekOfCode": "class AutoFillForm(forms.Form):\n    file = forms.FileField(required=True, label=\"Choose a file\")\n    latest_sheet = forms.ModelChoiceField(\n        queryset=Sheet.objects.all(), \n        required=False, \n        label=\"Select a Sheet\",\n        widget=forms.Select(attrs={'class': 'form-control'})\n    )",
        "detail": "main.forms",
        "documentation": {}
    },
    {
        "label": "UserLeader",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class UserLeader(models.Model):\n    user = models.OneToOneField(User, related_name='leader', on_delete=models.CASCADE)\n    leader = models.ForeignKey(User, related_name='team_members', on_delete=models.CASCADE)\n    class Meta:\n        unique_together = ('user', 'leader')\n    def __str__(self) -> str:\n        return f\"{self.user.username} --> {self.leader.username}\"\nclass Lead(models.Model):\n    name = models.CharField(max_length=255, unique=True, db_collation='utf8mb4_general_ci')\n    time_zone = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Lead",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Lead(models.Model):\n    name = models.CharField(max_length=255, unique=True, db_collation='utf8mb4_general_ci')\n    time_zone = models.CharField(max_length=100, blank=True, null=True)\n    def __str__(self) -> str:\n        return f\"{self.name} --> {self.time_zone}\"   \nclass Sheet(models.Model):\n    name = models.CharField(max_length=250, db_collation='utf8mb4_general_ci')\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    is_done = models.BooleanField(default=False)\n    done_date = models.DateTimeField(null=True, blank=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Sheet",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Sheet(models.Model):\n    name = models.CharField(max_length=250, db_collation='utf8mb4_general_ci')\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    is_done = models.BooleanField(default=False)\n    done_date = models.DateTimeField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    leads = models.ManyToManyField(Lead, related_name='sheets')\n    is_approved = models.BooleanField(default=False)    #True when the team leader approves the upload process\n    def __str__(self):\n        return self.name",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbers",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadPhoneNumbers(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    value = models.CharField(max_length=255)\n    class Meta:\n        unique_together = ('lead', 'sheet', 'value')\nclass LeadEmails(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    value = models.CharField(max_length=255)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadEmails",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadEmails(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    value = models.CharField(max_length=255)\n    class Meta:\n        unique_together = ('lead', 'sheet', 'value')\nclass LeadContactNames(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    value = models.CharField(max_length=255)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadContactNames",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadContactNames(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    value = models.CharField(max_length=255)\n    class Meta:\n        unique_together = ('lead', 'sheet', 'value')\nclass Acceptance(models.Model):\n    ACCEPTANCE_TYPES = [\n        (0, 'Decline'),\n        (1, 'Accept'),",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Acceptance",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Acceptance(models.Model):\n    ACCEPTANCE_TYPES = [\n        (0, 'Decline'),\n        (1, 'Accept'),\n    ]\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    acceptance_type = models.IntegerField(choices=ACCEPTANCE_TYPES)\n    team_leader = models.ForeignKey(User, on_delete=models.CASCADE)\n    approved_at = models.DateTimeField(auto_now_add=True)\nclass TerminationCode(models.Model):",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "TerminationCode",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class TerminationCode(models.Model):\n    name = models.CharField(max_length=10)\n    full_name = models.CharField(max_length=25)\n    def __str__(self):\n        return self.name\nclass ReadyShow(models.Model):\n    LABEL_CHOICES = [\n        ('EHUB', 'EHUB'),\n        ('EHUB2', 'EHUB2'),\n        ('EP', 'EP'),",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "ReadyShow",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class ReadyShow(models.Model):\n    LABEL_CHOICES = [\n        ('EHUB', 'EHUB'),\n        ('EHUB2', 'EHUB2'),\n        ('EP', 'EP'),\n    ]\n    name = models.CharField(max_length=255)\n    sheet = models.ForeignKey(Sheet, on_delete=models.SET_NULL, null=True)\n    leads = models.ManyToManyField(Lead, related_name='ready_shows')\n    is_done = models.BooleanField(default=False)       #To mark the show done after cutting it",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesShow",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class SalesShow(models.Model):\n    LABEL_CHOICES = [\n        ('EHUB', 'EHUB'),\n        ('EHUB2', 'EHUB2'),\n        ('EP', 'EP'),\n    ]\n    Agent = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    name = models.CharField(max_length=255)\n    sheet = models.ForeignKey(Sheet, on_delete=models.SET_NULL, null=True)\n    leads = models.ManyToManyField(Lead, related_name='sales_shows')",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "PriceRequest",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class PriceRequest(models.Model):\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    request_date = models.DateTimeField(auto_now_add=True)\n    show = models.ForeignKey(SalesShow, on_delete=models.CASCADE)\n    options = models.TextField()\n    status = models.CharField(max_length=20, choices=[('booked', 'Booked'), ('not_booked', 'Not Booked')], null=True)\n    num_rooms = models.PositiveIntegerField(null=True, blank=True)\n    num_nights = models.PositiveIntegerField(null=True, blank=True)\n    notes = models.TextField(null=True)\n    email_status = models.CharField(max_length=20, choices=[('sent', 'Sent'), ('not_sent', 'Not Sent')], null=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationCode",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadTerminationCode(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    flag = models.ForeignKey(TerminationCode, on_delete=models.CASCADE)   # The terminatin code value\n    sales_show = models.ForeignKey(SalesShow, on_delete=models.CASCADE)\n    CB_date = models.DateTimeField(null=True)\n    notes = models.TextField(null=True)\n    is_qualified = models.BooleanField(default=False)\n    entry_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=[('booked', 'Booked'), ('not_booked', 'Not Booked')], null=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "OldShow",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class OldShow(models.Model):\n    name = models.CharField(max_length=255)\nclass LeadTerminationHistory(models.Model):\n    entry_date = models.DateTimeField(auto_now_add=True)\n    termination_code = models.ForeignKey(TerminationCode, on_delete=models.CASCADE)\n    cb_date = models.DateTimeField(null=True)\n    notes = models.TextField(null=True)\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    show = models.ForeignKey(SalesShow, null=True, blank=True, on_delete=models.CASCADE)\n    old_show = models.ForeignKey(OldShow, null=True, blank=True, on_delete=models.CASCADE)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadTerminationHistory",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadTerminationHistory(models.Model):\n    entry_date = models.DateTimeField(auto_now_add=True)\n    termination_code = models.ForeignKey(TerminationCode, on_delete=models.CASCADE)\n    cb_date = models.DateTimeField(null=True)\n    notes = models.TextField(null=True)\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE)\n    show = models.ForeignKey(SalesShow, null=True, blank=True, on_delete=models.CASCADE)\n    old_show = models.ForeignKey(OldShow, null=True, blank=True, on_delete=models.CASCADE)\n    def clean(self):\n        # Ensure only one of sales_show or old_show is set",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Notification(models.Model):\n    NOTIFICATION_TYPES = [\n        (0, 'Import Request'),\n        (1, 'Acceptance Notification'),\n        (2, 'Decline Notification'),\n        (3, 'Autofill Request'),\n        (4, 'Autofill Request accepted'),\n        (5, 'Autofill Request decliend'),\n    ]\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_notifications')",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Log(models.Model):\n    message = models.CharField(max_length=255)\n    date = models.DateTimeField(auto_now_add=True)\n    def save(self, *args, **kwargs):\n        from IBH.settings import TIME_ZONE \n        cairo_tz = pytz.timezone(TIME_ZONE)\n        self.date = timezone.localtime(timezone.now(), cairo_tz)\n        super().save(*args, **kwargs)\nclass LatestSheet(models.Model):\n    main_sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE, related_name=\"main_sheet\")",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LatestSheet",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LatestSheet(models.Model):\n    main_sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE, related_name=\"main_sheet\")\n    latest_sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE, related_name=\"latest_sheet\")\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\nclass LeadsAverage(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    count = models.IntegerField()\n    created_at = models.DateTimeField(auto_now_add=True)\nclass SalesTeams(models.Model): ",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "LeadsAverage",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class LeadsAverage(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    sheet = models.ForeignKey(Sheet, on_delete=models.CASCADE)\n    count = models.IntegerField()\n    created_at = models.DateTimeField(auto_now_add=True)\nclass SalesTeams(models.Model): \n    LABEL_CHOICES = [\n        ('EHUB', 'EHUB'),\n        ('EHUB2', 'EHUB2'),\n        ('EP', 'EP'),",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "SalesTeams",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class SalesTeams(models.Model): \n    LABEL_CHOICES = [\n        ('EHUB', 'EHUB'),\n        ('EHUB2', 'EHUB2'),\n        ('EP', 'EP'),\n    ]\n    label = models.CharField(max_length=10, choices=LABEL_CHOICES, default='EHUB')\n    leader = models.ForeignKey(User, on_delete=models.CASCADE)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "main.routing",
        "description": "main.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'ws/notifications/$', consumers.NotificationConsumer.as_asgi()),\n]",
        "detail": "main.routing",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", index, name=\"index\"),\n    path(\"login/\", login_view, name=\"login\"),\n    path(\"logout/\", logout_view, name=\"logout\"),\n    path('api/sheets/', sheet_list, name='sheet-list'),\n]",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "send_websocket_message",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def send_websocket_message(user_id, notification_id, message, read, notification_state):\n    channel_layer = get_channel_layer()\n    async_to_sync(channel_layer.group_send)(\n        f'notifications_{user_id}',\n        {\n            'type': 'send_notification',\n            'message': message,\n            'id': notification_id,\n            'read': read,\n            'state': notification_state",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "clean_company_name",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def clean_company_name(name):\n    # Check if the name is a float and handle NaN values\n    if isinstance(name, float):\n        if math.isnan(name):\n            return ''  # Return an empty string for NaN values\n        else:\n            name = str(name)  # Convert other floats to strings\n    # Convert name to string if it's not already\n    if not isinstance(name, str):\n        name = str(name)",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "filter_companies",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def filter_companies(name):\n    # List of words to filter out\n    filter_words = [\n        \"Administration\", \"agency\", \"airport\", \"Association\", \"authority\", \"Bank\",\n        \"convention\", \"Council\", \"department\", \"embassy\", \"event\", \"Exhibits\",\n        \"EXIHIBTION\", \"expo\", \"Federal\", \"FORCE\", \"FOUNDATION\", \"government\",\n        \"Institute\", \"Military\", \"Ministry\", \"navy\", \"pavilion\", \"police\",\n        \"Society\", \"travel\", \"admin.\", \"dept.\", \"admin\", \"dept\", \"Elsevier\",\n        \"John Deere\", \"NaviRetail\", \"Thermo Fisher\", \"T-mobile\", \"Verizon\", \n        \"INTIX\", \"Abbott\", \"Fujifilm\", \"Dexcom\", \"astrazenca\", \"AbbVie\"",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "is_valid_phone_number",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def is_valid_phone_number(phone_number):\n    # Define a regex pattern for valid phone numbers\n    phone_pattern = re.compile(r'^[+\\d\\s\\(\\)-]+$')\n    return bool(phone_pattern.match(phone_number)) and re.search(r'\\d', phone_number)\ndef has_valid_contact(row):\n    phone_number = get_string_value(row, 'Phone Number')\n    direct_cell_number = get_string_value(row, 'Direct / Cell Number')\n    email = get_string_value(row, 'Email')\n    # Validate phone numbers and email\n    valid_phone = any(is_valid_phone_number(phone_number) for phone_number in [phone_number, direct_cell_number] if phone_number)",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "has_valid_contact",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def has_valid_contact(row):\n    phone_number = get_string_value(row, 'Phone Number')\n    direct_cell_number = get_string_value(row, 'Direct / Cell Number')\n    email = get_string_value(row, 'Email')\n    # Validate phone numbers and email\n    valid_phone = any(is_valid_phone_number(phone_number) for phone_number in [phone_number, direct_cell_number] if phone_number)\n    valid_email = bool(email)  # Assuming any non-empty string is a valid email\n    return valid_phone or valid_email\ndef get_sheet_name(name: str) -> str:\n    # Regular expression to match the sheet name",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "get_sheet_name",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def get_sheet_name(name: str) -> str:\n    # Regular expression to match the sheet name\n    match = re.match(r'^([a-zA-Z\\s]+)\\s\\d{4}', name)\n    if match:\n        # print(get_sheet_name(\"test name 2024 - test - 4551\"))  # Output: \"test name\"\n        # print(get_sheet_name(\"example name 2023 - example - 1234\")) # Output: \"example name\"\n        return match.group(1).strip()\n    return \"\"\ndef get_lead_related_data(lead):\n    # Returns the latest contact data ",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "get_lead_related_data",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def get_lead_related_data(lead):\n    # Returns the latest contact data \n    phone_number = LeadPhoneNumbers.objects.filter(lead=lead).order_by('id').values_list('value', flat=True).last()\n    email = LeadEmails.objects.filter(lead=lead).order_by('id').values_list('value', flat=True).last()\n    contact_name = LeadContactNames.objects.filter(lead=lead).order_by('id').values_list('value', flat=True).last()\n    return (phone_number, email, contact_name)\ndef get_string_value(row, key):\n    \"\"\"Safely get a string value from a dictionary, handling None and NaN.\"\"\"\n    value = row.get(key, '')\n    # Convert to string if it's not already a string and handle NaN",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "get_string_value",
        "kind": 2,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "def get_string_value(row, key):\n    \"\"\"Safely get a string value from a dictionary, handling None and NaN.\"\"\"\n    value = row.get(key, '')\n    # Convert to string if it's not already a string and handle NaN\n    if isinstance(value, float) and math.isnan(value):\n        return ''\n    return str(value).strip()",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "NOTIFICATIONS_STATES",
        "kind": 5,
        "importPath": "main.utils",
        "description": "main.utils",
        "peekOfCode": "NOTIFICATIONS_STATES = {\n    'SUCCESS': 'SUCCESS',\n    'INFO': 'INFO',\n    'WARNING': 'WARNING',\n    'ERROR': 'ERROR'\n}\ndef send_websocket_message(user_id, notification_id, message, read, notification_state):\n    channel_layer = get_channel_layer()\n    async_to_sync(channel_layer.group_send)(\n        f'notifications_{user_id}',",
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def index(request):\n    if request.user.is_authenticated: \n        return redirect(f\"/{request.user.groups.first().name}\")\n    return redirect(\"main:login\")\ndef login_view(request):\n    context = {\"error\": \"\"}\n    if request.method == \"POST\":\n        username = request.POST.get(\"username\", \"\").strip()\n        password = request.POST.get(\"password\", \"\").strip()\n        try:",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def login_view(request):\n    context = {\"error\": \"\"}\n    if request.method == \"POST\":\n        username = request.POST.get(\"username\", \"\").strip()\n        password = request.POST.get(\"password\", \"\").strip()\n        try:\n            if not username or not password:\n                raise ValidationError(\"Username and password are required.\")\n            if len(username) < 3 or len(username) > 20:\n                raise ValidationError(\"Username must be between 3 and 20 characters long.\")",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def logout_view(request):\n    username = request.user.username  # Get username before logging out\n    logout(request)\n    Log.objects.create(message=f\"User [{username}] has logged out of the system\")\n    return redirect(\"/login/\")\ndef sheet_list(request):\n    term = request.GET.get('q', '')\n    sheets = Sheet.objects.filter(name__icontains=term)\n    results = [{'id': sheet.id, 'text': sheet.name} for sheet in sheets]\n    return JsonResponse({'items': results})",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "sheet_list",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def sheet_list(request):\n    term = request.GET.get('q', '')\n    sheets = Sheet.objects.filter(name__icontains=term)\n    results = [{'id': sheet.id, 'text': sheet.name} for sheet in sheets]\n    return JsonResponse({'items': results})\n@user_passes_test(lambda user: is_in_group(user, \"operations_team_leader\") or is_in_group(user, \"operations_manager\"))\ndef lead_details(request, pk):\n    # Get the lead instance based on the primary key (pk)\n    lead = get_object_or_404(Lead, pk=pk)\n    # Retrieve all related phone numbers, emails, and contact names",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "lead_details",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def lead_details(request, pk):\n    # Get the lead instance based on the primary key (pk)\n    lead = get_object_or_404(Lead, pk=pk)\n    # Retrieve all related phone numbers, emails, and contact names\n    phone_numbers = lead.leadphonenumbers_set.all()\n    emails = lead.leademails_set.all()\n    contact_names = lead.leadcontactnames_set.all()\n    # Use a set to remove duplicates based on value\n    unique_phone_numbers = {pn.value: pn for pn in phone_numbers}.values()\n    unique_emails = {em.value: em for em in emails}.values()",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "add_lead",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def add_lead(request):\n    group_name = None\n    if request.user.groups.exists():\n        group_name = request.user.groups.first().name\n    if request.method == 'POST':\n        form = LeadForm(request.POST)\n        if form.is_valid():\n            lead = form.save(commit=False)\n            # Debugging\n            print(\"Selected Sheets:\", form.cleaned_data.get('sheets'))",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "edit_lead",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def edit_lead(request, pk):\n    group_name = None\n    if request.user.groups.exists():\n        group_name = request.user.groups.first().name\n    logger.debug(f\"User group: {group_name}\")\n    lead = get_object_or_404(Lead, id=pk)\n    if request.method == 'POST':\n        form = LeadForm(request.POST, instance=lead)\n        if form.is_valid():\n            lead = form.save(commit=False)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "delete_lead",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def delete_lead(request, pk):\n    # Fetch the lead instance or return a 404 error if not found\n    lead = get_object_or_404(Lead, pk=pk)\n    # Get the user's group name\n    group_name = None\n    if request.user.groups.exists():\n        group_name = request.user.groups.first().name\n    if request.method == 'POST':\n        lead.sheets.clear()\n        lead.delete()",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "auto_fill",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def auto_fill(request):\n    if request.method == 'POST':\n        form = AutoFillForm(request.POST, request.FILES)\n        if form.is_valid():\n            file = request.FILES['file']\n            selected_sheet = form.cleaned_data.get('latest_sheet')\n            try:\n                # Load data\n                if file.name.endswith('.xlsx'):\n                    data = pd.read_excel(file, engine='openpyxl')",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "upload_sheet",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def upload_sheet(request):\n    form = UploadSheetsForm()\n    if request.method == 'POST':\n        form = UploadSheetsForm(request.POST, request.FILES)\n        if 'file' in request.FILES:\n            file = request.FILES['file']\n            if file.name.endswith('.xlsx'):\n                data = pd.read_excel(file, engine='openpyxl', header=None)\n            elif file.name.endswith('.xls'):\n                data = pd.read_excel(file, header=None)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "leads_average_view",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def leads_average_view(request):\n    user = request.user\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Get the date range\n    start_date_obj, end_date_obj = None, None\n    if start_date:\n        try:\n            start_date_obj = datetime.strptime(start_date, '%Y-%m-%d')\n        except ValueError:",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "import_lead_termination_history",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def import_lead_termination_history(request):\n    form = ImportSheetsForm()\n    if request.method == 'POST':\n        form = ImportSheetsForm(request.POST)\n        if form.is_valid():\n            folder_path = form.cleaned_data['folder_path']\n            if os.path.isdir(folder_path):\n                files = os.listdir(folder_path)\n                skipped_files = []\n                errors = []",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "logger = logging.getLogger('custom')\ndef index(request):\n    if request.user.is_authenticated: \n        return redirect(f\"/{request.user.groups.first().name}\")\n    return redirect(\"main:login\")\ndef login_view(request):\n    context = {\"error\": \"\"}\n    if request.method == \"POST\":\n        username = request.POST.get(\"username\", \"\").strip()\n        password = request.POST.get(\"password\", \"\").strip()",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "OperationsManagerConfig",
        "kind": 6,
        "importPath": "operations_manager.apps",
        "description": "operations_manager.apps",
        "peekOfCode": "class OperationsManagerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'operations_manager'",
        "detail": "operations_manager.apps",
        "documentation": {}
    },
    {
        "label": "AssignLeadsToLeaderForm",
        "kind": 6,
        "importPath": "operations_manager.forms",
        "description": "operations_manager.forms",
        "peekOfCode": "class AssignLeadsToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='leads').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'\n    )\n    leader = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='operations_team_leader'),\n        label='Select Team Leader'\n    )\nclass PriceRequestForm(forms.ModelForm):",
        "detail": "operations_manager.forms",
        "documentation": {}
    },
    {
        "label": "PriceRequestForm",
        "kind": 6,
        "importPath": "operations_manager.forms",
        "description": "operations_manager.forms",
        "peekOfCode": "class PriceRequestForm(forms.ModelForm):\n    class Meta:\n        model = PriceRequest\n        fields = ['lead', 'show', 'options', 'status', 'num_rooms', 'num_nights', 'notes', 'email_status', 'lead_status']",
        "detail": "operations_manager.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "operations_manager.urls",
        "description": "operations_manager.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name=\"index\"),\n    path('manage-leads-teams/', manage_leads_teams, name='manage-leads-teams'),\n    path('lead-details/<int:pk>/', lead_details, name='lead-details'),\n    path('assign-lead-to-leader/', assign_lead_to_leader, name='assign-lead-to-leader'),\n    path('upload-sheet/', upload_sheet, name='upload-sheet'),\n    path('auto-fill/', auto_fill, name='auto-fill'),\n    path('sheet/<int:sheet_id>/', sheet_detail, name='sheet-detail'),\n    path('edit-lead/<int:pk>/', edit_lead, name='edit-lead'),\n    path('add-lead/', add_lead, name='add-lead'),",
        "detail": "operations_manager.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)\n    else:\n        leads = Lead.objects.all()",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "manage_leads_teams",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def manage_leads_teams(request):\n    operations_leaders = User.objects.filter(groups__name=\"operations_team_leader\")\n    paginator_operations = Paginator(operations_leaders, 5)  # Show 5 operations team leaders per page\n    page_number_operations = request.GET.get('page_operations')\n    page_operations = paginator_operations.get_page(page_number_operations)\n    if request.method == 'POST' and 'remove_member' in request.POST:\n        leader_id = request.POST.get('leader_id')\n        user_id = request.POST.get('user_id')\n        leader = get_object_or_404(User, id=leader_id)\n        user = get_object_or_404(User, id=user_id)",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "assign_lead_to_leader",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def assign_lead_to_leader(request):\n    if request.method == 'POST':\n        form = AssignLeadsToLeaderForm(request.POST)\n        if form.is_valid():\n            user = form.cleaned_data['user']\n            leader = form.cleaned_data['leader']\n            UserLeader.objects.get_or_create(user=user, leader=leader)\n            return redirect('operations_manager:manage-leads-teams') \n    else:\n        form = AssignLeadsToLeaderForm()",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "sheet_detail",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def sheet_detail(request, sheet_id):\n    sheet = get_object_or_404(Sheet, id=sheet_id)\n    leads = sheet.leads.all()\n    return render(request, \"operations_manager/sheet_detail.html\", {\n        \"sheet\": sheet,\n        \"leads\": leads,\n    })\ndef cut_ready_show_into_sales_shows(request, ready_show_id):\n    # Get the ReadyShow and mark it as done\n    ready_show = get_object_or_404(ReadyShow, id=ready_show_id)",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "cut_ready_show_into_sales_shows",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def cut_ready_show_into_sales_shows(request, ready_show_id):\n    # Get the ReadyShow and mark it as done\n    ready_show = get_object_or_404(ReadyShow, id=ready_show_id)\n    ready_show.is_done = True\n    ready_show.done_date = timezone.now()\n    ready_show.save()\n    # Get the leads associated with the ReadyShow\n    leads = list(ready_show.leads.all())\n    total_leads = len(leads)\n    # Determine how many SalesShows to create based on the number of leads",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "sales_shows_by_label",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def sales_shows_by_label(request, label=None):\n    if label not in ['EHUB', 'EHUB2', 'EP']:\n        label = 'EHUB'\n    # Fetch SalesShows by the label of the associated ReadyShow\n    sales_shows = SalesShow.objects.filter(label=label)\n    # Get all users in the 'Sales' group\n    sales_group = Group.objects.get(name='Sales')\n    sales_agents = sales_group.user_set.all()\n    context = {\n        'sales_shows': sales_shows,",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "assign_sales_show",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def assign_sales_show(request):\n    if request.method == 'POST':\n        show_id = request.POST.get('assign_show_id')\n        show = get_object_or_404(SalesShow, id=show_id)\n        # Get the selected agent ID from the form\n        agent_id = request.POST.get(f'agent_id_{show_id}')\n        if agent_id:\n            agent = get_object_or_404(User, id=agent_id)\n            # Assign the selected agent to the show\n            show.Agent = agent",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "ready_shows_view",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def ready_shows_view(request, label=None):\n    # If no label is passed, default to 'EHUB'\n    if label not in ['EHUB', 'EHUB2', 'EP']:\n        label = 'EHUB'\n    # Filter ReadyShows based on the label\n    ready_shows = ReadyShow.objects.filter(label=label, is_done=False)\n    # Pass the active label to the template to highlight the active tab\n    context = {\n        'ready_shows': ready_shows,\n        'active_label': label,",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "done_ready_shows",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def done_ready_shows(request, label=None):\n    done_shows = ReadyShow.objects.filter(is_done=True)\n    if label not in ['EHUB', 'EHUB2', 'EP']:\n        label = 'EHUB'\n    done_shows = ReadyShow.objects.filter(label=label, is_done=True)\n    context = {\n        'done_shows': done_shows,\n        'label': label,\n        'active_label': label,\n    }",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "unassigned_sales_shows",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def unassigned_sales_shows(request, label='EHUB'):\n    unassigned_shows = SalesShow.objects.filter(Agent__isnull=True, label=label)\n    # Get the groups\n    sales_groups = Group.objects.filter(name__in=['sales', 'sales_team_leader', 'sales_manager'])\n    # Get all users who are in any of these groups\n    sales_agents = User.objects.filter(groups__in=sales_groups).distinct()\n    context = {\n        'unassigned_shows': unassigned_shows,\n        'label': label,\n        'sales_agents': sales_agents,",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "assigned_sales_shows",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def assigned_sales_shows(request, label='EHUB'):\n    assigned_shows = SalesShow.objects.filter(Agent__isnull=False, label=label)\n    context = {\n        'assigned_shows': assigned_shows,\n        'label': label,\n        'active_label': label,\n    }\n    return render(request, 'operations_manager/assigned_sales_shows.html', context)\ndef view_sales_agents(request):\n    sales_group = Group.objects.get(name='sales')",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "view_sales_agents",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def view_sales_agents(request):\n    sales_group = Group.objects.get(name='sales')\n    sales_team_leader_group = Group.objects.get(name='sales_team_leader')\n    sales_manager_group = Group.objects.get(name='sales_manager')\n    # Get all users who belong to one of these groups\n    agents = User.objects.filter(groups__in=[sales_group, sales_team_leader_group, sales_manager_group]).distinct()\n    context = {\n        'agents':agents\n    }\n    return render(request, \"operations_manager/view_agents.html\", context)",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "view_agent_done_shows",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def view_agent_done_shows(request, agent_id):\n    agent = get_object_or_404(User, id=agent_id)\n    if request.method == 'POST':\n        show_id = request.POST.get('show_id')\n        show = get_object_or_404(SalesShow, id=show_id, Agent=agent)\n        # Recycle the show\n        show.is_recycled = True\n        show.rec_date = timezone.now()\n        show.save()\n        messages.success(request, f'Show \"{show.name}\" has been recycled.')",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "price_requests_view",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def price_requests_view(request):\n    if request.method == 'POST':\n        form = PriceRequestForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('operations_manager:price_request')\n    else:\n        form = PriceRequestForm()\n    price_requests = PriceRequest.objects.all().order_by(\"-id\")\n    context = {",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "update_price_requests",
        "kind": 2,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "def update_price_requests(request):\n    if request.method == 'POST':\n        for key in request.POST:\n            if key.startswith('email_status_'):\n                request_id = key.split('_')[2]\n                email_status = request.POST[key]\n                PriceRequest.objects.filter(id=request_id).update(email_status=email_status)\n            elif key.startswith('lead_status_'):\n                request_id = key.split('_')[2]\n                lead_status = request.POST[key]",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "operations_manager.views",
        "description": "operations_manager.views",
        "peekOfCode": "logger = logging.getLogger('custom')\ndef index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)\n    else:",
        "detail": "operations_manager.views",
        "documentation": {}
    },
    {
        "label": "OperationsTeamLeaderConfig",
        "kind": 6,
        "importPath": "operations_team_leader.apps",
        "description": "operations_team_leader.apps",
        "peekOfCode": "class OperationsTeamLeaderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'operations_team_leader'",
        "detail": "operations_team_leader.apps",
        "documentation": {}
    },
    {
        "label": "AssignLeadsToLeaderForm",
        "kind": 6,
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "peekOfCode": "class AssignLeadsToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='leads').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'\n    )\n    leader = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='operations_team_leader'),\n        label='Select Team Leader'\n    )\nclass LeadForm(forms.ModelForm):",
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "LeadForm",
        "kind": 6,
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "peekOfCode": "class LeadForm(forms.ModelForm):\n    sheets = forms.ModelMultipleChoiceField(\n        queryset=Sheet.objects.all(),\n        widget=forms.SelectMultiple(attrs={'class': 'form-control'}),\n        help_text='Select one or more sheets from the dropdown.',\n    )\n    phone_numbers = forms.CharField(\n        widget=forms.Textarea(attrs={'placeholder': 'Enter phone numbers separated by commas'}),\n        required=False,\n        help_text='Enter multiple phone numbers separated by commas.'",
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumbersFormSet",
        "kind": 5,
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "peekOfCode": "LeadPhoneNumbersFormSet = inlineformset_factory(\n    Lead, LeadPhoneNumbers, fields=('value',), extra=1, can_delete=True\n)\nLeadEmailsFormSet = inlineformset_factory(\n    Lead, LeadEmails, fields=('value',), extra=1, can_delete=True\n)\nLeadContactNamesFormSet = inlineformset_factory(\n    Lead, LeadContactNames, fields=('value',), extra=1, can_delete=True\n)\nclass AssignLeadsToLeaderForm(forms.Form):",
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "LeadEmailsFormSet",
        "kind": 5,
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "peekOfCode": "LeadEmailsFormSet = inlineformset_factory(\n    Lead, LeadEmails, fields=('value',), extra=1, can_delete=True\n)\nLeadContactNamesFormSet = inlineformset_factory(\n    Lead, LeadContactNames, fields=('value',), extra=1, can_delete=True\n)\nclass AssignLeadsToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='leads').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'",
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "LeadContactNamesFormSet",
        "kind": 5,
        "importPath": "operations_team_leader.forms",
        "description": "operations_team_leader.forms",
        "peekOfCode": "LeadContactNamesFormSet = inlineformset_factory(\n    Lead, LeadContactNames, fields=('value',), extra=1, can_delete=True\n)\nclass AssignLeadsToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='leads').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'\n    )\n    leader = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='operations_team_leader'),",
        "detail": "operations_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "operations_team_leader.urls",
        "description": "operations_team_leader.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name=\"index\"),\n    path('add-lead/', add_lead, name='add-lead'),\n    path('upload-sheet/', upload_sheet, name='upload-sheet'),\n    path('leads-average/', leads_average_view, name='leads-average'),\n    path('lead-details/<int:pk>/', lead_details, name='lead-details'),\n    path('notifications/', notifications, name='notifications'),\n    path('auto-fill/', auto_fill, name='auto-fill'),\n    path('edit-lead/<int:pk>/', edit_lead, name='edit-lead'),\n    path('delete-lead/<int:pk>/', delete_lead, name='delete-lead'),",
        "detail": "operations_team_leader.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)\n    else:\n        leads = Lead.objects.all()",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "notifications",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def notifications(request):\n    user = request.user\n    notifications_for_user = Notification.objects.filter(\n        receiver=user).order_by('-created_at')\n    # Implement pagination\n    page = request.GET.get('page', '')\n    # Show 10 notifications per page\n    paginator = Paginator(notifications_for_user, 5)\n    try:\n        notifications_page = paginator.page(page)",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "notification_detail",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def notification_detail(request, notification_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheets = notification.sheets.all()\n    if not notification.read:\n        notification.read = True\n        notification.save()\n    return render(request, TL + '/notification_detail.html',{\n        'notification': notification,\n        'sheets': sheets\n    })",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "accept_upload_notification",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def accept_upload_notification(request, notification_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheets = notification.sheets.all()\n    # Loop over all sheets\n    for sheet in sheets:\n        # Get sheet name\n        sheet_name = sheet.name.strip()\n        # Read sheet data from uploads folder\n        data = None\n        file_extension = str(sheet_name).split('.')[-1]",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "decline_upload_notification",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def decline_upload_notification(request, notification_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheets = notification.sheets.all()\n    # Loop over all sheets\n    for sheet in sheets:\n        # Get sheet name\n        sheet_name = sheet.name\n        # Delete sheet file from uploads folder\n        file_path = os.path.join(settings.MEDIA_ROOT, 'upload', str(sheet_name))\n        if os.path.exists(file_path):",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_sheet",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def view_sheet(request, notification_id, sheet_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheet = get_object_or_404(Sheet, id=sheet_id) \n    sheet_name = sheet.name\n    # Determine the correct file path based on the notification type\n    if notification.notification_type == 0:  # Import Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'upload', str(sheet_name))\n    elif notification.notification_type == 3:  # Autofill Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'auto_fill', str(sheet_name))\n    else:",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "delete_excel_lead",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def delete_excel_lead(request, notification_id, sheet_id, company_name):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheet = get_object_or_404(Sheet, id=sheet_id)\n    company_name = unquote(company_name)  # Decode the company name\n    # Determine the correct file path based on the notification type\n    if notification.notification_type == 0:  # Import Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'upload', str(sheet.name))\n    elif notification.notification_type == 3:  # Autofill Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'auto_fill', str(sheet.name))\n    # Load the sheet data",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "edit_excel_lead",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def edit_excel_lead(request, notification_id, sheet_id, company_name):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheet = get_object_or_404(Sheet, id=sheet_id)\n    company_name = unquote(company_name)\n    # Determine the correct file path based on the notification type\n    if notification.notification_type == 0:  # Import Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'upload', str(sheet.name))\n    elif notification.notification_type == 3:  # Autofill Request\n        file_path = os.path.join(settings.MEDIA_ROOT, 'auto_fill', str(sheet.name))\n    # Load the sheet data",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "accept_auto_fill_notification",
        "kind": 2,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "def accept_auto_fill_notification(request, notification_id):\n    notification = get_object_or_404(Notification, id=notification_id)\n    sheet = notification.sheets.first()\n    receiver_user = sheet.user\n    sender_user = request.user \n    new_notification = Notification.objects.create(\n        sender=sender_user,\n        receiver=receiver_user,\n        message=\"Your auto fill request has been accepted\",\n        notification_type=4,",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "logger = logging.getLogger('custom')\n# Variable used as a shortcut for opsTL \nTL = 'operations_team_leader'\n@user_passes_test(lambda user: is_in_group(user, TL))\ndef index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "TL",
        "kind": 5,
        "importPath": "operations_team_leader.views",
        "description": "operations_team_leader.views",
        "peekOfCode": "TL = 'operations_team_leader'\n@user_passes_test(lambda user: is_in_group(user, TL))\ndef index(request):\n    query = request.GET.get('q')\n    # Get the most recent phone number, email, and contact name\n    recent_phone_number = LeadPhoneNumbers.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_email = LeadEmails.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    recent_contact_name = LeadContactNames.objects.filter(lead=OuterRef('pk')).order_by('-id').values('value')[:1]\n    if query:\n        leads = Lead.objects.filter(name__icontains=query)",
        "detail": "operations_team_leader.views",
        "documentation": {}
    },
    {
        "label": "SalesConfig",
        "kind": 6,
        "importPath": "sales.apps",
        "description": "sales.apps",
        "peekOfCode": "class SalesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sales'",
        "detail": "sales.apps",
        "documentation": {}
    },
    {
        "label": "LeadPhoneNumberForm",
        "kind": 6,
        "importPath": "sales.forms",
        "description": "sales.forms",
        "peekOfCode": "class LeadPhoneNumberForm(forms.ModelForm):\n    class Meta:\n        model = LeadPhoneNumbers\n        fields = ['value']\n        widgets = {\n            'value': forms.TextInput(attrs={\n                'class': 'form-control form-control-sm',\n                'placeholder': 'Add phone number',\n                \"required\":\"false\"\n            }),",
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "LeadEmailForm",
        "kind": 6,
        "importPath": "sales.forms",
        "description": "sales.forms",
        "peekOfCode": "class LeadEmailForm(forms.ModelForm):\n    class Meta:\n        model = LeadEmails\n        fields = ['value']\n        widgets = {\n            'value': forms.EmailInput(attrs={\n                'class': 'form-control form-control-sm',\n                'placeholder': 'Add email',\n                \"required\":\"false\"\n            }),",
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "LeadContactNameForm",
        "kind": 6,
        "importPath": "sales.forms",
        "description": "sales.forms",
        "peekOfCode": "class LeadContactNameForm(forms.ModelForm):\n    class Meta:\n        model = LeadContactNames\n        fields = ['value']\n        widgets = {\n            'value': forms.TextInput(attrs={\n                'class': 'form-control form-control-sm',\n                'placeholder': 'Add contact name',\n                \"required\":\"false\"\n            }),",
        "detail": "sales.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sales.urls",
        "description": "sales.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name=\"index\"),\n    path('assigned-shows/', agent_assigned_shows, name='assigned-shows'),\n    path('done-shows/', view_done_shows, name='view-done-shows'),\n    re_path(r'^view-saved-leads/(?P<code_id>\\d+)?/?$', view_saved_leads, name='view_saved_leads'),\n    path('show-detail/<int:show_id>/', show_detail, name='show-detail'),\n    path('show-detail/<int:show_id>/<str:recycle>', show_detail, name='show-detail-recycle'),\n    path(\"view-recycled-shows\", view_recycled_shows, name=\"view-recycled-shows\"),\n    path(\"view-done-recycled-shows\", view_done_recycled_shows, name=\"view-done-recycled-shows\"),\n]",
        "detail": "sales.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def index(request):\n    user = request.user  # Assume the user is authenticated\n    # Get date filter from request\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Convert to datetime objects if provided\n    if start_date:\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')\n    else:\n        start_date = None  # Default to None if not provided",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "agent_assigned_shows",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def agent_assigned_shows(request):\n    # Fetch the SalesShows assigned to the logged-in user\n    assigned_shows = SalesShow.objects.filter(Agent=request.user, is_done=False, is_recycled=False).order_by('-id')\n    group_name = request.user.groups.first().name\n    context = {\n        'assigned_shows': assigned_shows,\n        'group_name':group_name\n    }\n    return render(request, 'sales/assigned_shows.html', context)\n@user_passes_test(lambda user: user.groups.filter(name__in=[\"sales\", \"sales_team_leader\", \"sales_manager\"]).exists())",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "show_detail",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def show_detail(request, show_id, recycle=\"\"):\n    role = request.user.groups.first()\n    # Get the SalesShow instance, ensuring the Agent matches the current user\n    show = get_object_or_404(SalesShow, id=show_id)\n    # Fetch all termination codes based on user group\n    termination_codes = TerminationCode.objects.all() if request.user.groups.first().name in [\"sales_manager\", \"sales_team_leader\"] else TerminationCode.objects.exclude(name=\"IC\")\n    error_message = None\n    # Build a list of leads along with their related details\n    leads_with_details = []\n    for lead in show.leads.all():",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_saved_leads",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def view_saved_leads(request, code_id=None):\n    code = get_object_or_404(TerminationCode, name='CB') if code_id is None else get_object_or_404(TerminationCode, id=code_id)\n    role = request.user.groups.first().name\n    allowed = {\n        'sales': ['CB', 'PR'],\n        'sales_team_leader': ['CB', 'PR', 'CD', 'FL', 'IC'],\n        'sales_manager': ['CB', 'PR', 'CD', 'FL', 'IC']\n    }\n    role = request.user.groups.first().name if request.user.groups.exists() else None\n    if role and role in allowed:",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_shows",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def view_done_shows(request):\n    done_shows = SalesShow.objects.filter(Agent=request.user, is_done=True, is_recycled=False).order_by('-id')\n    context = {\n        'done_shows': done_shows\n    }\n    return render(request, \"sales/view_done_shows.html\", context)\n@user_passes_test(lambda user: user.groups.filter(name__in=[\"sales\", \"sales_team_leader\", \"sales_manager\"]).exists())\ndef view_recycled_shows(request):\n    shows = SalesShow.objects.filter(Agent=request.user, is_recycled=True, is_done_rec=False)\n    context = {",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_recycled_shows",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def view_recycled_shows(request):\n    shows = SalesShow.objects.filter(Agent=request.user, is_recycled=True, is_done_rec=False)\n    context = {\n        'shows':shows\n    }\n    return render(request, \"sales/view_recycled_shows.html\", context)\n@user_passes_test(lambda user: user.groups.filter(name__in=[\"sales\", \"sales_team_leader\", \"sales_manager\"]).exists())\ndef view_done_recycled_shows(request):\n    shows = SalesShow.objects.filter(Agent=request.user, is_recycled=True, is_done_rec=True)\n    context = {",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "view_done_recycled_shows",
        "kind": 2,
        "importPath": "sales.views",
        "description": "sales.views",
        "peekOfCode": "def view_done_recycled_shows(request):\n    shows = SalesShow.objects.filter(Agent=request.user, is_recycled=True, is_done_rec=True)\n    context = {\n        'shows':shows\n    }\n    return render(request, \"sales/view_done_recycled_shows.html\", context)",
        "detail": "sales.views",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "sales_manager.templatetags.custom_filters",
        "description": "sales_manager.templatetags.custom_filters",
        "peekOfCode": "def get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "sales_manager.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "sales_manager.templatetags.custom_filters",
        "description": "sales_manager.templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "sales_manager.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "SalesManagerConfig",
        "kind": 6,
        "importPath": "sales_manager.apps",
        "description": "sales_manager.apps",
        "peekOfCode": "class SalesManagerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sales_manager'",
        "detail": "sales_manager.apps",
        "documentation": {}
    },
    {
        "label": "AssignSalesToLeaderForm",
        "kind": 6,
        "importPath": "sales_manager.forms",
        "description": "sales_manager.forms",
        "peekOfCode": "class AssignSalesToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='sales').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'\n    )\n    leader = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='sales_team_leader'),\n        label='Select Team Leader'\n    )",
        "detail": "sales_manager.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sales_manager.urls",
        "description": "sales_manager.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", index, name=\"index\"),\n    path('assign-sales-to-leader', assign_sales_to_leader, name='assign-sales-to-leader'),\n    path('manage-sales-teams', manage_sales_teams, name='manage-sales-teams'),\n    path('assigned-shows/', agent_assigned_shows, name='assigned-shows'),\n    path('done-shows/', view_done_shows, name='view-done-shows'),\n    path('show-detail/<int:show_id>/', show_detail, name='show-detail'),\n    path('view-teams-prospect/', view_teams_prospect, name='view-teams-prospect'),\n    path(\"view-team-prospect/<int:code_id>/<int:leader_id>\", view_team_prospect, name='view-team-prospect-with-leader'),\n    path(\"view-teams-shows\",view_teams_shows, name=\"view-teams-shows\"),",
        "detail": "sales_manager.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def index(request):\n    # Get date filter from request\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Convert to datetime objects if provided\n    if start_date:\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')\n    else:\n        start_date = None  # Default to None if not provided\n    if end_date:",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "assign_sales_to_leader",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def assign_sales_to_leader(request):\n    if request.method == 'POST':\n        form = AssignSalesToLeaderForm(request.POST)\n        if form.is_valid():\n            user = form.cleaned_data['user']\n            leader = form.cleaned_data['leader']\n            UserLeader.objects.get_or_create(user=user, leader=leader)\n            return redirect('sales_manager:manage-sales-teams') \n    else:\n        form = AssignSalesToLeaderForm()",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "manage_sales_teams",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def manage_sales_teams(request):\n    sales_leaders = User.objects.filter(groups__name=\"sales_team_leader\")\n    paginator_sales = Paginator(sales_leaders, 5)\n    page_number_sales = request.GET.get('page_sales')\n    page_sales = paginator_sales.get_page(page_number_sales)\n    if request.method == 'POST':\n        if 'assign_team' in request.POST:\n            leader_id = request.POST.get('leader_id')\n            team_label = request.POST.get('team_label')\n            leader = get_object_or_404(User, id=leader_id)",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "view_teams_prospect",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def view_teams_prospect(request):\n    teams = SalesTeams.objects.all()\n    default_code = TerminationCode.objects.get(name=\"CB\").id\n    context = {\n        'teams': teams,\n        'default_code':default_code\n    }\n    return render(request, 'sales_manager/view_teams_prospect.html', context)\n@user_passes_test(lambda user: is_in_group(user, \"sales_manager\"))\ndef view_teams_shows(request):",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "view_teams_shows",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def view_teams_shows(request):\n    teams = SalesTeams.objects.all()\n    context = {\n        'teams': teams,\n    }\n    return render(request, \"sales_manager/view_teams_shows.html\", context)\n@user_passes_test(lambda user: is_in_group(user, \"sales_manager\"))\ndef view_teams_shows_recycled(request):\n    teams = SalesTeams.objects.all()\n    context = {",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "view_teams_shows_recycled",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def view_teams_shows_recycled(request):\n    teams = SalesTeams.objects.all()\n    context = {\n        'teams': teams,\n    }\n    return render(request, \"sales_manager/view_teams_shows_recycled.html\", context)\ndef lead_history_view(request):\n    query = request.GET.get('q')\n    lead_history = None\n    leads = None",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "lead_history_view",
        "kind": 2,
        "importPath": "sales_manager.views",
        "description": "sales_manager.views",
        "peekOfCode": "def lead_history_view(request):\n    query = request.GET.get('q')\n    lead_history = None\n    leads = None\n    if query:\n        # Get all leads that match the query\n        leads = Lead.objects.filter(name__icontains=query)\n        # If any leads are found, retrieve their history\n        if leads.exists():\n            lead_ids = leads.values_list('id', flat=True)  # Get the lead IDs",
        "detail": "sales_manager.views",
        "documentation": {}
    },
    {
        "label": "SalesTeamLeaderConfig",
        "kind": 6,
        "importPath": "sales_team_leader.apps",
        "description": "sales_team_leader.apps",
        "peekOfCode": "class SalesTeamLeaderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sales_team_leader'",
        "detail": "sales_team_leader.apps",
        "documentation": {}
    },
    {
        "label": "AssignSalesToLeaderForm",
        "kind": 6,
        "importPath": "sales_team_leader.forms",
        "description": "sales_team_leader.forms",
        "peekOfCode": "class AssignSalesToLeaderForm(forms.Form):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='sales').exclude(id__in=UserLeader.objects.values('user')),\n        label='Select User'\n    )\n    leader = forms.ModelChoiceField(\n        queryset=User.objects.filter(groups__name='sales_team_leader'),\n        label='Select Team Leader'\n    )",
        "detail": "sales_team_leader.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sales_team_leader.urls",
        "description": "sales_team_leader.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name='index'),\n    path(\"assigned-shows\", agent_assigned_shows, name='assigned-shows'), \n    path(\"show-detail/<int:show_id>/\", show_detail, name='show-detail'), \n    path('show-detail/<int:show_id>/<str:recycle>/', show_detail, name='show-detail-recycle'),\n    path(\"view-done-shows/\", view_done_shows, name='view-done-shows'),\n    path(\"view-saved-leads/\", view_saved_leads, name='view-saved-leads'),\n    path(\"view-team-shows/\", view_team_shows, name='view-team-shows'),\n    path(\"view-team-member-shows/<int:member_id>/<str:label>/\", view_team_member, name='view-team-member-shows'),\n    path(\"view-team-prospect/\", view_team_prospect, name='view-team-prospect'),  ",
        "detail": "sales_team_leader.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def index(request):\n    user = request.user  # Get the currently logged-in user\n    team_members = UserLeader.objects.filter(leader=user).values_list('user', flat=True)  # Get user IDs of team members\n    # Get date filter from request\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Convert to datetime objects if provided\n    if start_date:\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')\n    else:",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_shows",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def view_team_shows(request, leader_id=None):\n    leader = None \n    if leader_id:\n        leader=User.objects.get(id=leader_id)\n    else:\n        leader=request.user\n    team_members = list(UserLeader.objects.filter(leader=leader).values(\"user__id\", \"user__username\"))\n    if leader_id is not None:\n        team_members.append({\n            'user__id': leader.id,",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_member",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def view_team_member(request, member_id, label=\"new\"):\n    # Fetch the SalesShow instances for the specified team member\n    shows = SalesShow.objects.filter(Agent__id=member_id, is_done=(label==\"done\")).order_by('-id')\n    # Get the team member object (optional)\n    member = get_object_or_404(UserLeader, user__id=member_id)\n    context = {\n        'member': member,\n        'shows': shows,\n        'label':label\n    }",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_prospect",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def view_team_prospect(request, code_id=None, leader_id=None):\n    code = get_object_or_404(TerminationCode, name='CB') if code_id is None else get_object_or_404(TerminationCode, id=code_id)\n    role = request.user.groups.first().name if request.user.groups.exists() else None\n    my_allowed = ['CB', 'PR', 'CD', 'FL', 'IC']\n    if code.name not in my_allowed:\n        return HttpResponseBadRequest()\n    if leader_id:\n        leader=User.objects.get(id=leader_id)\n    elif role==\"sales_team_leader\":\n        leader = request.user",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_recycled",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def view_team_recycled(request, leader_id=None):\n    leader = None \n    role=request.user.groups.first().name\n    if leader_id:\n        leader=User.objects.get(id=leader_id)\n    elif role==\"sales_team_leader\":\n        leader=request.user\n    else:\n        return HttpResponseBadRequest()\n    team_members = UserLeader.objects.filter(leader=leader).values(\"user__id\", \"user__username\")",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "view_team_member_recycled",
        "kind": 2,
        "importPath": "sales_team_leader.views",
        "description": "sales_team_leader.views",
        "peekOfCode": "def view_team_member_recycled(request, member_id, label=\"new\"):\n    member = get_object_or_404(User, id=member_id)\n    role=request.user.groups.first().name\n    # Filter shows based on the label\n    if label == \"done\":\n        shows = SalesShow.objects.filter(Agent=member, is_recycled=True, is_done_rec=True).order_by(\"-id\")\n    else:  # default to \"new\"\n        shows = SalesShow.objects.filter(Agent=member, is_recycled=True, is_done_rec=False).order_by(\"-id\")\n    context = {\n        'member': member,",
        "detail": "sales_team_leader.views",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "templatetags.custom_filters",
        "description": "templatetags.custom_filters",
        "peekOfCode": "def get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "templatetags.custom_filters",
        "description": "templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'IBH.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]